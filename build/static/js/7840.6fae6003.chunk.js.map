{"version":3,"file":"static/js/7840.6fae6003.chunk.js","mappings":"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","sources":["views/order/Order.js","views/utils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom';\nimport { findBidAndAskPrice, token } from '../utils';\nimport {\n  CAccordionItem,\n  CAccordionHeader,\n  CAccordionBody,\n  CAccordion,\n  CFormInput,  \n  CFormSelect,\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CWidgetStatsA,\n  CInputGroupText,\n  CInputGroup,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport proto from \"./marketDataFeed.proto\";\nimport { Buffer } from \"buffer\";\nconst protobuf = require(\"protobufjs\");\n\n// Initialize Protobuf root\nlet protobufRoot = null;\nconst initProtobuf = async () => {\n  protobufRoot = await protobuf.load(proto);\n  console.log(\"Protobuf part initialization complete\");\n};\n\n// Function to get WebSocket URL\nconst getUrl = async (token) => {\n  const apiUrl = \"https://api-v2.upstox.com/feed/market-data-feed/authorize\";\n  let headers = {\n    \"Content-type\": \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  const res = await response.json();\n  return res.data.authorizedRedirectUri;\n};\n\n// Helper functions for handling Blob and ArrayBuffer\nconst blobToArrayBuffer = async (blob) => {\n  if (\"arrayBuffer\" in blob) return await blob.arrayBuffer();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject();\n    reader.readAsArrayBuffer(blob);\n  });\n};\n\n// Decode Protobuf messages\nconst decodeProfobuf = (buffer) => {\n  if (!protobufRoot) {\n    console.warn(\"Protobuf part not initialized yet!\");\n    return null;\n  }\n  const FeedResponse = protobufRoot.lookupType(\n    \"com.upstox.marketdatafeeder.rpc.proto.FeedResponse\"\n  );\n  return FeedResponse.decode(buffer);\n};\n\nconst Order = () => {  \n  const navigate = useNavigate()\n  const [isConnected, setIsConnected] = useState(false);\n  const [feedData, setFeedData] = useState([]);\n  const [tradingSymbol, setTradingSymbol] = useState('');\n  const [ltpcData, setLtpcData] = useState(null);\n  const [totalQuantity,setTotalQuantity] = useState(1)\n  const [openOrders, setOpenOrders] = useState(null)\n  const [symbolValue, setSymbolValue] = useState('NIFTY');\n  const [bidPrice, setBidPrice] = useState(0);\n  const [askPrice, setAskPrice] = useState(0);\n  const [bidAskQuote, setBidAskQuote] = useState(null);\n  const [isEquityShort, setIsEquityShort] = useState(false)\n  const [postData, setPostData] = useState({ name: '', email: '' })\n  const [responseMessage, setResponseMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [selectOptions, setSelectOptions] = useState([]);\n  const [selectTradingSymbol, setSelectTradingSymbol] = useState([]);\n\n  \n  const [selectedExpiry, setSelectedExpiry] = useState('');\n  const fetchOptions = async () => {\n    try {\n      // Make an API call to fetch options based on symbolValue\n      const response = await fetch(`http://139.59.39.167/api/v1/instrument/expiry/symbol/${symbolValue}`);\n      const data = await response.json();\n      // Update options state with fetched data\n      console.log(data.data.expiry)\n      setSelectOptions(data.data.expiry);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n    }\n  };\n\n  // Function to fetch options based on input value\n  const fetchTradingSymbol = async () => {\n    try {\n      // Make an API call to fetch options based on symbolValue\n      const response = await fetch(`http://139.59.39.167/api/v1/instrument/symbol/${symbolValue}/expiry/${selectedExpiry}`);\n      const data = await response.json();\n      // Update options state with fetched data\n      console.log(\"manish-----0000\")\n      console.log(data.data)\n      setSelectTradingSymbol(data.data);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n    }\n  };\n\n  const storedJsonString = localStorage.getItem('placeOrderData')\n  console.log(storedJsonString)\n  console.log(\"kkr\")\n  const tradingSymbolsArray =storedJsonString.split(',');\n  console.log(tradingSymbolsArray[2])\n  const connectWebSocket = async (token,urlTradingSymbol) => {\n    console.log(\"llr\")\n    console.log(urlTradingSymbol)\n    try {\n      const wsUrl = await getUrl(token);\n      const ws = new WebSocket(wsUrl);\n      \n      ws.onopen = () => {\n        setIsConnected(true);\n        console.log(\"Connected\");\n        const data = {\n          guid: \"someguid\",\n          method: \"sub\",\n          data: {\n            mode: \"full\",\n            instrumentKeys: [urlTradingSymbol], \n          },\n        };\n        ws.send(Buffer.from(JSON.stringify(data)));\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        console.log(\"Disconnected\");\n      };\n\n      ws.onmessage = async (event) => {\n        const arrayBuffer = await blobToArrayBuffer(event.data);\n        let buffer = Buffer.from(arrayBuffer);\n        let response = decodeProfobuf(buffer);\n        setFeedData((currentData) => [\n          ...currentData,\n          JSON.stringify(response),\n        ]);\n        setLtpcData(response.feeds[urlTradingSymbol].ff.marketFF?.ltpc)\n        setBidAskQuote(response.feeds[urlTradingSymbol].ff.marketFF?.marketLevel.bidAskQuote)\n        const [bp, ap] = findBidAndAskPrice(response.feeds[urlTradingSymbol].ff.marketFF?.marketLevel.bidAskQuote)\n        setBidPrice(bp)\n        setAskPrice(ap)\n        console.log(response)\n      };\n\n      ws.onerror = (error) => {\n        setIsConnected(false);\n        console.log(\"WebSocket error:\", error);\n      };\n\n      return () => ws.close();\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    \n    initProtobuf();\n    \n    setTradingSymbol(tradingSymbolsArray[3])\n    \n    connectWebSocket(token,tradingSymbolsArray[0]);\n\n    // // Function to fetch data\n    // const fetchOpenOrder = async () => {\n    //   try {\n    //     const response = await fetch('http://139.59.39.167/api/v1/order/filter/user/1/type/open')\n    //     const result = await response.json()\n    //     setOpenOrders(result)\n    //     console.log(result)\n    //   } catch (error) {\n    //     console.error('Error fetching data:', error)\n    //   }\n    // }\n\n    // // Call the fetch function\n    // fetchOpenOrder()\n\n    // if (symbolValue.trim() !== '') {\n    //   fetchOptions()\n    // }\n    // Cleanup function (optional)\n    return () => {\n      // Perform cleanup (unsubscribe, clear intervals, etc.)\n    }\n  }, [symbolValue,token])  \n\n  \n  const openOrder = async () => {\n    const userDataString = localStorage.getItem('userData')\n    let userData = JSON.parse(userDataString) \n    userData = JSON.parse(userData) \n    console.log(userData)\n    let userToken = userData.data.token\n    console.log(userToken)\n    const userId = userData.data.user_id\n  \n    // setLoading(true)\n    const postData = {\n      \"user_id\": userId,\n      \"symbol\": tradingSymbolsArray[0],\n      \"trading_symbol\": tradingSymbolsArray[2],\n      \"exchange\": tradingSymbolsArray[11],\n      \"trade_type\": tradingSymbolsArray[9],\n      \"equity_short\": isEquityShort,\n      \"expiry_date\": tradingSymbolsArray[5],\n      \"quantity\": totalQuantity,\n      \"lot_size\": tradingSymbolsArray[8],\n    }\n    try {\n      const headers = {\n        'Content-Type':'application/json',\n        'Accept':'*/*',\n        'Authorization': `Bearer ${userToken}`\n      }\n      console.log(headers)\n      console.log(postData)\n      // Make a POST request using axios.post\n      const response = await axios.post('http://139.59.39.167/api/v1/order', postData, {headers:headers})\n      // console.log(\"jjkkuuiopp\")\n      // console.log(response.status)\n      setResponseMessage(response.data)\n      // Access the order_id field\n      const msg=response.data.data.message\n      alert(msg)\n      console.log(response.data)\n      if(msg != \"Insuficeint balance!\"){\n        navigate(`/portfolio`)\n      }\n        \n    } catch (error) {\n      console.error('Error submitting data:', error)\n      setResponseMessage('An error occurred while submitting data.')\n    } finally {\n      // setLoading(false)\n    }\n  }\n\n  const openSellOrder = async () => {\n    setIsEquityShort(true)\n    openOrder()\n  }\n\n  return (\n    <>    \n    <CRow>\n      <CCol sm={3}/>\n      <CCol sm={6}>        \n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              {ltpcData?.ltp}\n              {/* <span className=\"fs-6 fw-normal\">\n                (40.9% <CIcon icon={cilArrowTop} />)\n              </span> */}\n            </>\n          }\n          title={tradingSymbol !==''? tradingSymbol: tradingSymbolsArray[2]}\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['', '', '', '', '', '', ''],\n                datasets: [\n                  {\n                    label: '',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: '#321fdb',\n                    data: [65, 59, 84, 84, 51, 55, 40],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n          />\n          </CCol>\n      </CRow>  \n      \n      <CRow>\n        <CCol sm={3}/>\n        <CCol sm={6}>\n          <CRow>\n            <CCol sm={12}>\n            <CAccordion activeItemKey={2}>\n              <CAccordionItem itemKey={1}>\n                <CAccordionHeader>Details</CAccordionHeader>\n                <CAccordionBody>\n                  <table\n                    style={{\n                      width: '100%',\n                      borderCollapse: 'collapse',\n                      border: '1px solid black',\n                      textAlign: 'center',\n                    }}\n                  >\n                    <tr style={{ margin: '0', padding: '0' }}>\n                      <th style={{ border: '1px solid black' }}>Bid</th>\n                      <th style={{ border: '1px solid black' }}>Ask</th>\n                    </tr>\n                    \n                    {\n                      bidAskQuote?.map((data, index) => (\n                        <React.Fragment key={index}>\n                          <tr style={{ fontWeight: 'bold' }}>\n                          <td style={{ border: '1px solid black', fontSize: '10px' }}>Quantity:{data.bq} | Price:{data.bp} </td>\n                          <td style={{ border: '1px solid black', fontSize: '10px' }}>Quantity:{data.aq} | Price:{data.ap} </td>\n                          </tr>\n                        </React.Fragment>\n                      ))\n                    }\n                                            \n                  </table>\n                </CAccordionBody>\n              </CAccordionItem>\n            </CAccordion>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <br/>\n            <CInputGroup className=\"mb-3\">\n              \n              <CInputGroupText id=\"basic-addon1\">Lot Size : {tradingSymbolsArray[8]} x</CInputGroupText>\n              <CFormInput value={totalQuantity} onChange={(e) => setTotalQuantity(e.target.value)}placeholder=\"Quantity\" aria-label=\"Quantity\" aria-describedby=\"basic-addon1\"/>\n            \n            </CInputGroup>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n            <CInputGroupText id=\"basic-addon1\">Quantity x Lot Size : {tradingSymbolsArray[8] * totalQuantity} </CInputGroupText>\n            \n            </CCol>\n            <CCol sm={12}>\n            <CInputGroupText id=\"basic-addon1\">Bid Price : {bidPrice} </CInputGroupText>\n            <CInputGroupText id=\"basic-addon1\">Ask Price : {askPrice} </CInputGroupText>\n            \n            </CCol>\n          </CRow>\n          {tradingSymbolsArray[9][0] == 'O' && (\n            <div className=\"d-grid gap-2\">\n              <br/>\n              <CButton color=\"success\" onClick={(e) => openOrder()}>Place Order</CButton>\n            </div>\n          )}\n          {tradingSymbolsArray[9][0] !== 'O' && (\n            <CRow>\n            <CCol sm={6}>\n              <div className=\"d-grid gap-2\">\n                <CButton color=\"success\" onClick={(e) => openOrder()}>Buy</CButton>\n              </div>\n            </CCol>\n            <CCol sm={6}>\n              <div className=\"d-grid gap-2\">\n                <CButton color=\"danger\" onClick={(e) => openSellOrder()}>Sell</CButton>\n              </div>\n            </CCol>\n          </CRow>\n          )}\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Order\n","export function findBidAndAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    const askPrice = Math.min(...askPrices);\r\n    return [bidPrice, askPrice];\r\n}\r\n\r\n\r\nexport function findBidPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    return bidPrice\r\n}\r\n\r\nexport function findAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const askPrice = Math.max(...askPrices);\r\n    return askPrice\r\n}\r\n\r\n\r\n\r\nexport const token = \"eyJ0eXAiOiJKV1QiLCJrZXlfaWQiOiJza192MS4wIiwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiI2MkFIQVAiLCJqdGkiOiI2NWQ4MmJjNjI3ZWFkOTMzYjUzODM5YWYiLCJpc011bHRpQ2xpZW50IjpmYWxzZSwiaXNBY3RpdmUiOnRydWUsInNjb3BlIjpbImludGVyYWN0aXZlIiwiaGlzdG9yaWNhbCJdLCJpYXQiOjE3MDg2NjU3OTgsImlzcyI6InVkYXBpLWdhdGV3YXktc2VydmljZSIsImV4cCI6MTcwODcyNTYwMH0.aOzgAAo2X30P-edOaP3rjOVpzQ8KXW0s_8e_HRSwoI0\"\r\n\r\n\r\n\r\n"],"names":["protobuf","require","protobufRoot","Order","navigate","useNavigate","isConnected","setIsConnected","useState","feedData","setFeedData","tradingSymbol","setTradingSymbol","ltpcData","setLtpcData","totalQuantity","setTotalQuantity","openOrders","setOpenOrders","symbolValue","setSymbolValue","bidPrice","setBidPrice","askPrice","setAskPrice","bidAskQuote","setBidAskQuote","isEquityShort","setIsEquityShort","postData","setPostData","name","email","responseMessage","setResponseMessage","loading","setLoading","selectOptions","setSelectOptions","selectTradingSymbol","setSelectTradingSymbol","selectedExpiry","setSelectedExpiry","storedJsonString","localStorage","getItem","console","log","tradingSymbolsArray","split","connectWebSocket","async","token","urlTradingSymbol","wsUrl","headers","Authorization","response","fetch","method","ok","Error","json","data","authorizedRedirectUri","getUrl","ws","WebSocket","onopen","guid","mode","instrumentKeys","send","Buffer","from","JSON","stringify","onclose","onmessage","_response$feeds$urlTr","_response$feeds$urlTr2","_response$feeds$urlTr3","arrayBuffer","blob","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","blobToArrayBuffer","event","buffer","lookupType","decode","warn","decodeProfobuf","currentData","feeds","ff","marketFF","ltpc","marketLevel","bp","ap","findBidAndAskPrice","error","close","useEffect","load","proto","initProtobuf","openOrder","userDataString","userData","parse","userToken","user_id","concat","axios","post","msg","message","alert","_jsxs","_Fragment","children","CRow","_jsx","CCol","sm","CWidgetStatsA","className","color","value","ltp","title","chart","CChartLine","style","height","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","options","plugins","legend","display","maintainAspectRatio","scales","x","grid","drawBorder","ticks","y","min","max","elements","line","borderWidth","tension","point","radius","hitRadius","hoverRadius","CAccordion","activeItemKey","CAccordionItem","itemKey","CAccordionHeader","CAccordionBody","width","borderCollapse","border","textAlign","margin","padding","map","index","React","fontWeight","fontSize","bq","aq","CInputGroup","CInputGroupText","id","CFormInput","onChange","e","target","placeholder","CButton","onClick","openSellOrder","buySellData","bidPrices","order","askPrices","Math","findAskPrice"],"sourceRoot":""}