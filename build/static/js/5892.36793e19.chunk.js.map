{"version":3,"file":"static/js/5892.36793e19.chunk.js","mappings":"8RA8BA,MAAMA,EAAWC,EAAQ,OAGzB,IAAIC,EAAe,KACnB,MAsMA,EAvJmBC,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,IAC1CO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAS,OACxCS,EAASC,IAAeV,EAAAA,EAAAA,UAAS,IACjCW,EAASC,IAAeZ,EAAAA,EAAAA,UAAS,GAElCa,EAAmBC,aAAaC,QAAQ,kBAC9CC,QAAQC,IAAIJ,GAEZ,MAAMK,EAAgBC,KAAKC,MAAMP,GACjCG,QAAQC,IAAIC,IAEZG,EAAAA,EAAAA,YAAU,KA/DSC,WACnB5B,QAAqBF,EAAS+B,KAAKC,GACnCR,QAAQC,IAAI,wCAAwC,EA+DlDQ,GAEAC,EAAiBC,EAAAA,EAAMT,EAAcU,QAG9B,SAGN,CAACD,EAAAA,IAGJ,MAAMD,EAAmBJ,MAAOK,EAAME,KACpCb,QAAQC,IAAIY,GACZ,IACE,MAAMC,OAxEGR,WAEb,IAAIS,EAAU,CACZ,eAAgB,mBAChBC,cAAe,UAAYL,GAE7B,MAAMM,QAAiBC,MALR,4DAKsB,CACnCC,OAAQ,MACRJ,QAASA,IAEX,IAAKE,EAASG,GACZ,MAAM,IAAIC,MAAM,+BAGlB,aADkBJ,EAASK,QAChBC,KAAKC,qBAAqB,EA0DbC,CAAOd,GACrBe,EAAK,IAAIC,UAAUb,GAyCzB,OAvCAY,EAAGE,OAAS,KACV7C,GAAe,GACfiB,QAAQC,IAAI,aACZ,MAAMsB,EAAO,CACXM,KAAM,WACNV,OAAQ,MACRI,KAAM,CACJO,KAAM,OACNC,eAAgB,CAAClB,KAGrBa,EAAGM,KAAKC,EAAAA,GAAOC,KAAK/B,KAAKgC,UAAUZ,IAAO,EAG5CG,EAAGU,QAAU,KACXrD,GAAe,GACfiB,QAAQC,IAAI,eAAe,EAG7ByB,EAAGW,UAAY/B,UACb,MAAMgC,OA7EYhC,UACpB,gBAAiBiC,QAAmBA,EAAKD,cACtC,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,IAAMJ,EAAQE,EAAOG,QACrCH,EAAOI,QAAU,IAAML,IACvBC,EAAOK,kBAAkBT,EAAK,IAuEAU,CAAkBC,EAAM3B,MAClD,IACIN,EApEYkC,IACjBzE,EAIgBA,EAAa0E,WAChC,sDAEkBC,OAAOF,IANzBnD,QAAQsD,KAAK,sCACN,MAiEYC,CADFtB,EAAAA,GAAOC,KAAKI,IAEzBpD,GAAasE,GAAgB,IACxBA,EACHrD,KAAKgC,UAAUlB,MAEjB7B,EAAY6B,EAASwC,MAAM5C,GAAkB6C,GAAGC,SAASC,MACzDpE,EAAeyB,EAASwC,MAAM5C,GAAkB6C,GAAGC,SAASE,YAAYtE,aACxE,MAAOuE,EAAIC,IAAMC,EAAAA,EAAAA,IAAmB/C,EAASwC,MAAM5C,GAAkB6C,GAAGC,SAASE,YAAYtE,aAC7FG,EAAYoE,GACZlE,EAAYmE,EAAG,EAGjBrC,EAAGqB,QAAWkB,IACZlF,GAAe,GACfiB,QAAQC,IAAI,mBAAoBgE,EAAM,EAGjC,IAAMvC,EAAGwC,OAClB,CAAE,MAAOD,GACPjE,QAAQiE,MAAM,8BAA+BA,EAC/C,GAGFjE,QAAQC,IAAI,aACZD,QAAQC,IAAId,GAgCZ,OACEgF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAF,EAAAA,EAAAA,MAACG,EAAAA,GAAI,CAAAD,SAAA,EACLE,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,KACVN,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACC,GAAI,EAAEJ,SAAA,CACTrE,QAAQC,IAAIhB,IACbsF,EAAAA,EAAAA,KAACG,EAAAA,GAAa,CACZC,UAAU,OACVC,MAAM,UACNC,SAAO,EACPC,SAAU,CAAEC,MAAO,IACnBC,KAAK,GACLC,MAAM,QACNF,OAAQpF,EAASO,EAAcgF,SAAShF,EAAciF,SAAWjF,EAAckF,WAAWlF,EAAcgF,SAAShF,EAAciF,UAAUE,QAAQ,MAEnJd,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CAAAjB,UACJF,EAAAA,EAAAA,MAACoB,EAAAA,GAAS,CAAAlB,SAAA,EACRE,EAAAA,EAAAA,KAAA,KAAAF,SAAG,gBAAe,IAAE5E,GAAS8E,EAAAA,EAAAA,KAAA,UAC7BA,EAAAA,EAAAA,KAAA,KAAAF,SAAG,gBAAe,IAAE1E,GAAS4E,EAAAA,EAAAA,KAAA,UAC7BA,EAAAA,EAAAA,KAAA,KAAAF,SAAG,gBAAe,IAAEnE,EAAckF,YAAWb,EAAAA,EAAAA,KAAA,UAC7CA,EAAAA,EAAAA,KAAA,KAAAF,SAAG,aAAY,IAAEnE,EAAcsF,gBAAejB,EAAAA,EAAAA,KAAA,UAC9CA,EAAAA,EAAAA,KAAA,KAAAF,SAAG,eAAc,IAAEnE,EAAcuF,sBAKvCtB,EAAAA,EAAAA,MAACG,EAAAA,GAAI,CAAAD,SAAA,EACLE,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,KACVN,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACC,GAAI,EAAEJ,SAAA,EAACE,EAAAA,EAAAA,KAAA,UACbA,EAAAA,EAAAA,KAAA,OAAKmB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAAWvB,UACxDE,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACjB,MAAM,SAASkB,KAAK,KAAKC,QAAUC,GA5DzB1F,WACrB,MAAM2F,EAAiBnG,aAAaC,QAAQ,YAC5C,IAAImG,EAAW/F,KAAKC,MAAM6F,GAC1BC,EAAW/F,KAAKC,MAAM8F,GACtBlG,QAAQC,IAAIiG,GACZ,IAAIC,EAAYD,EAAS3E,KAAKZ,MAC9BX,QAAQC,IAAIkG,GACGD,EAAS3E,KAAK6E,QAC7B,IACE,MAAMrF,EAAU,CACd,eAAe,mBACf,cAAgB,UAADsF,OAAYF,IAEvBlF,QAAiBqF,EAAAA,EAAMC,IAAI,qCAADF,OAAsCG,EAAMC,IAAM,CAChFL,QAASI,EAAMJ,QACfxF,OAAQ4F,EAAM5F,OACduE,SAASqB,EAAMrB,SACfD,SAASsB,EAAMtB,UACf,CAACnE,QAAQA,IAEXf,QAAQC,IAAIgB,GACZyF,MAAMzF,EAASM,KAAKA,KAAKoF,SACzB/H,EAAS,aAEX,CAAE,MAAOqF,GAEP,MADAjE,QAAQiE,MAAM,uBAAwBA,GAChCA,CACR,GAiCoD2C,CAAe1G,GAAemE,SAAC,0BAIhF,C,kBCpOA,SAASL,EAAmB6C,GAE/B,MAAMC,EAAYD,EAAYE,KAAIP,GAASA,EAAM1C,KAC3CkD,EAAYH,EAAYE,KAAIP,GAASA,EAAMzC,KAKjD,MAAO,CAFUkD,KAAKC,OAAOJ,GACZG,KAAKE,OAAOH,GAEjC,CAYO,SAASI,EAAaP,GAEzB,MAAMG,EAAYH,EAAYE,KAAIP,GAASA,EAAMzC,KAIjD,OADiBkD,KAAKC,OAAOF,EAEjC,C,mCAIO,MAAMrG,EAAQ,wW","sources":["views/order/CloseOrder.js","views/utils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom';\nimport { findBidAndAskPrice, token } from '../utils';\nimport {\n  CFormInput, \n  CFormSelect,\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CWidgetStatsA,\n  CInputGroupText,\n  CInputGroup,\n  CWidgetStatsC,\n} from '@coreui/react'\nimport proto from \"./marketDataFeed.proto\";\nimport { Buffer } from \"buffer\";\nconst protobuf = require(\"protobufjs\");\n\n// Initialize Protobuf root\nlet protobufRoot = null;\nconst initProtobuf = async () => {\n  protobufRoot = await protobuf.load(proto);\n  console.log(\"Protobuf part initialization complete\");\n};\n\n\n// Function to get WebSocket URL\nconst getUrl = async (token) => {\n  const apiUrl = \"https://api-v2.upstox.com/feed/market-data-feed/authorize\";\n  let headers = {\n    \"Content-type\": \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  const res = await response.json();\n  return res.data.authorizedRedirectUri;\n};\n\n// Helper functions for handling Blob and ArrayBuffer\nconst blobToArrayBuffer = async (blob) => {\n  if (\"arrayBuffer\" in blob) return await blob.arrayBuffer();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject();\n    reader.readAsArrayBuffer(blob);\n  });\n};\n\n// Decode Protobuf messages\nconst decodeProfobuf = (buffer) => {\n  if (!protobufRoot) {\n    console.warn(\"Protobuf part not initialized yet!\");\n    return null;\n  }\n  const FeedResponse = protobufRoot.lookupType(\n    \"com.upstox.marketdatafeeder.rpc.proto.FeedResponse\"\n  );\n  return FeedResponse.decode(buffer);\n};\n\nconst CloseOrder = () => {  \n  const navigate = useNavigate()\n  const [isConnected, setIsConnected] = useState(false);\n  const [feedData, setFeedData] = useState([]);\n  const [ltpcData, setLtpcData] = useState([]);\n  const [averagePrice, setAveragePrice] = useState(0);\n  const [bidAskQuote, setBidAskQuote] = useState(null);\n  const [bidPrice,setBidPrice] = useState(0)\n  const [askPrice,setAskPrice] = useState(0)\n  \n  const storedJsonString = localStorage.getItem('placeOrderData'); \n  console.log(storedJsonString);\n\n  const openOrderJson = JSON.parse(storedJsonString);\n  console.log(openOrderJson);\n\n  useEffect(() => {\n    \n    initProtobuf();\n    \n    connectWebSocket(token,openOrderJson.symbol);\n\n    // Cleanup function (optional)\n    return () => {\n      // Perform cleanup (unsubscribe, clear intervals, etc.)\n    }\n  }, [token])  \n  \n\n  const connectWebSocket = async (token,urlTradingSymbol) => {\n    console.log(urlTradingSymbol)\n    try {\n      const wsUrl = await getUrl(token);\n      const ws = new WebSocket(wsUrl);\n      \n      ws.onopen = () => {\n        setIsConnected(true);\n        console.log(\"Connected\");\n        const data = {\n          guid: \"someguid\",\n          method: \"sub\",\n          data: {\n            mode: \"full\",\n            instrumentKeys: [urlTradingSymbol], \n          },\n        };\n        ws.send(Buffer.from(JSON.stringify(data)));\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        console.log(\"Disconnected\");\n      };\n\n      ws.onmessage = async (event) => {\n        const arrayBuffer = await blobToArrayBuffer(event.data);\n        let buffer = Buffer.from(arrayBuffer);\n        let response = decodeProfobuf(buffer);\n        setFeedData((currentData) => [\n          ...currentData,\n          JSON.stringify(response),\n        ]);\n        setLtpcData(response.feeds[urlTradingSymbol].ff.marketFF.ltpc)\n        setBidAskQuote(response.feeds[urlTradingSymbol].ff.marketFF.marketLevel.bidAskQuote)\n        const [bp, ap] = findBidAndAskPrice(response.feeds[urlTradingSymbol].ff.marketFF.marketLevel.bidAskQuote)\n        setBidPrice(bp)\n        setAskPrice(ap)\n      };\n\n      ws.onerror = (error) => {\n        setIsConnected(false);\n        console.log(\"WebSocket error:\", error);\n      };\n\n      return () => ws.close();\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n    }\n  };\n\n  console.log(\"ltpc data\")\n  console.log(ltpcData)\n\n  const closeOpenOrder = async (order) => {\n    const userDataString = localStorage.getItem('userData')\n    let userData = JSON.parse(userDataString) \n    userData = JSON.parse(userData) \n    console.log(userData)\n    let userToken = userData.data.token\n    console.log(userToken)\n    const userId = userData.data.user_id\n    try {\n      const headers = {\n        'Content-Type':'application/json',\n        'Authorization': `Bearer ${userToken}`\n      }\n      const response = await axios.put(`http://139.59.39.167/api/v1/order/${order.id}`, {\n        user_id: order.user_id,\n        symbol: order.symbol,\n        quantity:order.quantity,\n        lot_size:order.lot_size\n      },{headers:headers});\n  \n      console.log(response); // Log the response data\n      alert(response.data.data.message)\n      navigate('/portfolio')\n\n    } catch (error) {\n      console.error('Error closing order:', error);\n      throw error; // Rethrow the error for the caller to handle if needed\n    }\n  };\n\n  return (\n    <>    \n    <CRow>\n    <CCol sm={3}/>\n    <CCol sm={6}>\n      {console.log(feedData)}\n      <CWidgetStatsC\n        className=\"mb-3\"\n        color=\"primary\"\n        inverse\n        progress={{ value: 75 }}\n        text=\"\"\n        title=\"P & L\"\n        value={(askPrice*openOrderJson.lot_size*openOrderJson.quantity - openOrderJson.open_price*openOrderJson.lot_size*openOrderJson.quantity).toFixed(3)}\n      />  \n      <CCard>\n        <CCardBody>\n          <b>Bid Price :</b> {bidPrice}<br/>\n          <b>Ask Price :</b> {askPrice}<br/>\n          <b>Buy price :</b> {openOrderJson.open_price}<br/>\n          <b>Symbol :</b> {openOrderJson.trading_symbol}<br/>\n          <b>Buy Time :</b> {openOrderJson.open_time}</CCardBody>\n\n      </CCard>\n    </CCol>\n    </CRow>\n    <CRow>\n    <CCol sm={3}/>\n    <CCol sm={6}><br/>\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n      <CButton color=\"danger\" size=\"lg\" onClick={(e) => closeOpenOrder(openOrderJson)}>Close Order</CButton>\n    </div>\n    </CCol>\n    </CRow>\n    </>\n  )\n}\n\nexport default CloseOrder\n","export function findBidAndAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    const askPrice = Math.min(...askPrices);\r\n    return [bidPrice, askPrice];\r\n}\r\n\r\n\r\nexport function findBidPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    return bidPrice\r\n}\r\n\r\nexport function findAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const askPrice = Math.max(...askPrices);\r\n    return askPrice\r\n}\r\n\r\n\r\n\r\nexport const token = \"eyJ0eXAiOiJKV1QiLCJrZXlfaWQiOiJza192MS4wIiwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiI2MkFIQVAiLCJqdGkiOiI2NWQ4MmJjNjI3ZWFkOTMzYjUzODM5YWYiLCJpc011bHRpQ2xpZW50IjpmYWxzZSwiaXNBY3RpdmUiOnRydWUsInNjb3BlIjpbImludGVyYWN0aXZlIiwiaGlzdG9yaWNhbCJdLCJpYXQiOjE3MDg2NjU3OTgsImlzcyI6InVkYXBpLWdhdGV3YXktc2VydmljZSIsImV4cCI6MTcwODcyNTYwMH0.aOzgAAo2X30P-edOaP3rjOVpzQ8KXW0s_8e_HRSwoI0\"\r\n\r\n\r\n\r\n"],"names":["protobuf","require","protobufRoot","CloseOrder","navigate","useNavigate","isConnected","setIsConnected","useState","feedData","setFeedData","ltpcData","setLtpcData","averagePrice","setAveragePrice","bidAskQuote","setBidAskQuote","bidPrice","setBidPrice","askPrice","setAskPrice","storedJsonString","localStorage","getItem","console","log","openOrderJson","JSON","parse","useEffect","async","load","proto","initProtobuf","connectWebSocket","token","symbol","urlTradingSymbol","wsUrl","headers","Authorization","response","fetch","method","ok","Error","json","data","authorizedRedirectUri","getUrl","ws","WebSocket","onopen","guid","mode","instrumentKeys","send","Buffer","from","stringify","onclose","onmessage","arrayBuffer","blob","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","blobToArrayBuffer","event","buffer","lookupType","decode","warn","decodeProfobuf","currentData","feeds","ff","marketFF","ltpc","marketLevel","bp","ap","findBidAndAskPrice","error","close","_jsxs","_Fragment","children","CRow","_jsx","CCol","sm","CWidgetStatsC","className","color","inverse","progress","value","text","title","lot_size","quantity","open_price","toFixed","CCard","CCardBody","trading_symbol","open_time","style","display","justifyContent","CButton","size","onClick","e","userDataString","userData","userToken","user_id","concat","axios","put","order","id","alert","message","closeOpenOrder","buySellData","bidPrices","map","askPrices","Math","max","min","findAskPrice"],"sourceRoot":""}