{"version":3,"file":"static/js/8120.d410c7dc.chunk.js","mappings":"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","sources":["views/watchlist/Watchlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios'\n\nimport {\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CFormInput,\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport { headers } from '../utils';\n\n\n\nconst Watchlist = () => {\n  const [instruments, setInstruments] = useState([])\n  \n  const [findSymbol, setFindSymbol] = useState('')\n  const [instrumentsType, setInstrumentsType] = useState('OPT')\n  const [postData, setPostData] = useState({ name: '', email: '' })\n  const [responseMessage, setResponseMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  // const history = useHistory()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    // Call the fetch function\n    fetchInstrumentlist(\"EQUITY\",null)\n\n    // Cleanup function (optional)\n    return () => {\n      // Perform cleanup (unsubscribe, clear intervals, etc.)\n    }\n  }, [])\n  \n \n  // Function to fetch data\n  const fetchInstrumentlist = async (instrument_type, symbol_name) => {   \n    instrument_type = 'OPT' \n    try {\n      var url = `http://139.59.39.167/api/v1/instrument/all/type/${instrument_type}/name/${symbol_name}?limit=100&offset=0`\n      const response = await fetch(url)\n    \n      const result = await response.json()\n      setInstruments(result.data)\n      console.log(\"manish334\")\n      console.log(result)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    }\n  }\n\n  const handleInstrumentTypeChange = async (e) => {\n    setInstrumentsType(e.target.value)\n    fetchInstrumentlist(e.target.value,null)\n  }\n\n  const handleInstrumentSearch = async () => {\n    fetchInstrumentlist(instrumentsType,findSymbol)\n  }\n\n  const placeOrder = async (e) => {\n    // setPlaceOrderData(e)\n    const jsonString = JSON.stringify(e)\n    console.log(jsonString)\n    localStorage.setItem('placeOrderData', e)\n    // history.push('/order')\n    navigate(`/order?urlTradingSymbol=${e[2]}`)\n  }\n\n  return (\n    <>\n      <CRow>\n        {/* <CCol sm={3}/> */}\n        <CCol sm={3}>\n          <CFormSelect value={instrumentsType} onChange={(e) => handleInstrumentTypeChange(e)}>\n            {/* <option value={\"EQUITY\"}>EQUITY</option>\n            <option value={\"INDEX\"}>INDEX</option> */}\n            <option value={\"OPT\"}>OPTION</option>\n          </CFormSelect>\n        </CCol>\n        <CCol sm={4}>\n          <CInputGroup className=\"mb-4\">\n            <CFormInput value={findSymbol} onChange={(e)=> setFindSymbol(e.target.value)}placeholder=\"Enter Symbol\" aria-label=\"Enter Symbol\" aria-describedby=\"basic-addon1\"/>\n          </CInputGroup>\n        </CCol>\n        <CCol sm={2}>\n          <div className=\"d-grid gap-2\">\n              <CButton color=\"success\" onClick={handleInstrumentSearch}>Search</CButton>\n            </div>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Watchlist</CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive striped>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Symbol</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Type</CTableHeaderCell>\n                    \n                    <CTableHeaderCell>Expiry</CTableHeaderCell>\n                    <CTableHeaderCell>Last Price</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Order</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  \n                  {instruments.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div>{item[2]}</div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <div>{item[11].replace(/_/g, \" \")}</div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <div>{item[5]}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item[4]}</div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CButton color=\"dark\" onClick = {(e) => {\n                          placeOrder(item)\n                          }}>Place Order</CButton>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Watchlist\n"],"names":["Watchlist","instruments","setInstruments","useState","findSymbol","setFindSymbol","instrumentsType","setInstrumentsType","postData","setPostData","name","email","responseMessage","setResponseMessage","loading","setLoading","navigate","useNavigate","useEffect","fetchInstrumentlist","async","instrument_type","symbol_name","url","concat","response","fetch","result","json","data","console","log","error","_jsxs","_Fragment","children","CRow","_jsx","CCol","sm","CFormSelect","value","onChange","e","target","handleInstrumentTypeChange","CInputGroup","className","CFormInput","placeholder","CButton","color","onClick","xs","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","striped","CTableHead","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","replace","jsonString","JSON","stringify","localStorage","setItem","placeOrder"],"sourceRoot":""}