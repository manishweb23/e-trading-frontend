{"version":3,"file":"static/js/988.b7dbd0a7.chunk.js","mappings":"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","sources":["views/portfolio/Portfolio.js","views/utils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios'\nimport { findBidPrice, findAskPrice, token } from '../utils';\nimport {\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CFormInput,\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CWidgetStatsA,\n} from '@coreui/react'\n\n\nimport proto from \"./marketDataFeed.proto\";\nimport { Buffer } from \"buffer\";\nconst protobuf = require(\"protobufjs\");\n\n// Initialize Protobuf root\nlet protobufRoot = null;\nconst initProtobuf = async () => {\n  protobufRoot = await protobuf.load(proto);\n  console.log(\"Protobuf part initialization complete\");\n};\n\n// Function to get WebSocket URL\nconst getUrl = async (token) => {\n  const apiUrl = \"https://api-v2.upstox.com/feed/market-data-feed/authorize\";\n  let headers = {\n    \"Content-type\": \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  const res = await response.json();\n  return res.data.authorizedRedirectUri;\n};\n\n// Helper functions for handling Blob and ArrayBuffer\nconst blobToArrayBuffer = async (blob) => {\n  if (\"arrayBuffer\" in blob) return await blob.arrayBuffer();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject();\n    reader.readAsArrayBuffer(blob);\n  });\n};\n\n// Decode Protobuf messages\nconst decodeProfobuf = (buffer) => {\n  if (!protobufRoot) {\n    console.warn(\"Protobuf part not initialized yet!\");\n    return null;\n  }\n  const FeedResponse = protobufRoot.lookupType(\n    \"com.upstox.marketdatafeeder.rpc.proto.FeedResponse\"\n  );\n  return FeedResponse.decode(buffer);\n};\n\n\n\nconst Portfolio = () => {\n  \n  const [isConnected, setIsConnected] = useState(false);\n  const [fetchDataCalled, setFetchDataCalled] = useState(true);\n  const [feedData, setFeedData] = useState([]);\n  const [openSymbols,setOpenSymbols] = useState([]);\n  const [data, setData] = useState([])\n  const [orderType,setOrderType] = useState('open')\n  const [bidAskPrice,setBidAskPrice] = useState([])\n\n\n  \n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if(fetchDataCalled){\n      fetchData(orderType);\n    }\n    if(openSymbols.length > 0){\n      initProtobuf();  \n      connectWebSocket(token,openSymbols);\n    }\n\n  }, [orderType,openSymbols,fetchDataCalled]);\n\n  const connectWebSocket = async (token,urlTradingSymbol) => {\n    console.log(urlTradingSymbol)\n    try {\n      const wsUrl = await getUrl(token);\n      const ws = new WebSocket(wsUrl);\n      \n      ws.onopen = () => {\n        setIsConnected(true);\n        console.log(\"Connected\");\n        const data = {\n          guid: \"someguid\",\n          method: \"sub\",\n          data: {\n            mode: \"full\",\n            instrumentKeys: urlTradingSymbol, \n          },\n        };\n        ws.send(Buffer.from(JSON.stringify(data)));\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        console.log(\"Disconnected\");\n      };\n\n      ws.onmessage = async (event) => {\n        const arrayBuffer = await blobToArrayBuffer(event.data);\n        let buffer = Buffer.from(arrayBuffer);\n        let response = decodeProfobuf(buffer);\n        setFeedData(response.feeds)\n        console.log(feedData)\n      };\n\n      ws.onerror = (error) => {\n        setIsConnected(false);\n        console.log(\"WebSocket error:\", error);\n      };\n\n      return () => ws.close();\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n    }\n  };  \n\n  const fetchData = async (orderType) => {\n    const userDataString = localStorage.getItem('userData')\n    let userData = JSON.parse(userDataString) \n    userData = JSON.parse(userData) \n    console.log(userData)\n    let userToken = userData.data.token\n    console.log(userToken)\n    const userId = userData.data.user_id\n    setOrderType(orderType)\n    setFetchDataCalled(false)\n\n\n    try {\n      const headers = {\n        'Content-Type':'application/json',\n        'Authorization': `Bearer ${userToken}`\n      }\n      const response = await axios.get(`http://139.59.39.167/api/v1/order/filter/user/${userId}/type/${orderType}`, { headers:headers });\n      const jsonData = response\n      console.log(\"manig\")\n      console.log(jsonData.data)\n      setData(jsonData.data.data)\n      if(orderType == 'open'){\n        const extractedSymbols = jsonData.data.map(item => item.symbol);\n        console.log(extractedSymbols)\n        setOpenSymbols(extractedSymbols);\n      }\n      \n      console.log(jsonData.data)\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const closeOrder = async (order) => {\n    try {\n      const response = await axios.put(`http://139.59.39.167/api/v1/order/${order.id}`, {\n        user_id: order.user_id,\n        symbol: order.symbol,\n        quantity:order.quantity,\n        lot_size:order.lot_size\n      });\n  \n      console.log(response); // Log the response data\n      setOrderType('close')\n      return response; // Return the response data if needed\n    } catch (error) {\n      console.error('Error closing order:', error);\n      throw error; // Rethrow the error for the caller to handle if needed\n    }\n  };\n\n  const gotoOrderClose = async (e) => {\n    const jsonString = JSON.stringify(e);\n    console.log(\"main\");\n    console.log(jsonString);\n    await localStorage.setItem('placeOrderData', jsonString);\n    navigate(`/close-order`)\n  }\n\n  \n  return (\n    <>\n      <CRow>\n        {/* <CCol sm={3}/> */}\n        <CCol sm={3}>\n          <CFormSelect value={orderType} onChange={(e) => fetchData(e.target.value)}>\n            <option value={\"open\"}>Open</option>\n            <option value={\"close\"}>Closed</option>\n            <option value={\"all\"}>All</option>\n          </CFormSelect>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Portfolio</CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive striped>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    {/* <CTableHeaderCell>Symbol</CTableHeaderCell> */}\n                    <CTableHeaderCell>Trading Symbol</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Lot Size</CTableHeaderCell>\n                    <CTableHeaderCell>Quantity</CTableHeaderCell>\n                    <CTableHeaderCell>Expiry</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Entry Price</CTableHeaderCell>\n                    {orderType != 'all' &&(\n                    <CTableHeaderCell className=\"text-center\">P & L</CTableHeaderCell>\n                    )}\n\n                    <CTableHeaderCell className=\"text-center\">Exit Price</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Entry Time</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Exit Time</CTableHeaderCell>\n                    {orderType === 'open' &&(\n                    <CTableHeaderCell className=\"text-center\">Close Order</CTableHeaderCell>\n                    )}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  \n                  {data?.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      {/* <CTableDataCell>\n                        <div>{item.symbol}</div>\n                      </CTableDataCell> */}\n                      <CTableDataCell className=\"text-center\">\n                        <div>{item.trading_symbol}</div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <div>{item.lot_size}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.quantity}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.expiry_date}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.open_price}</div>\n                      </CTableDataCell>\n                      {orderType === 'open' &&(\n                      <CTableDataCell>\n                      {<div>{feedData[item.symbol]?(findAskPrice(feedData[item.symbol].ff.marketFF.marketLevel.bidAskQuote)*item.lot_size*item.quantity - item.open_price*item.lot_size*item.quantity).toFixed(3):0 }</div> }\n                      </CTableDataCell>\n                      )}\n                      {orderType === 'close' &&(\n                      <CTableDataCell>\n                      {<div>{(item.close_price*item.lot_size*item.quantity - item.open_price*item.lot_size*item.quantity).toFixed(3)}</div> }\n                      \n                      </CTableDataCell>\n                      )}\n\n                      <CTableDataCell>\n                        <div>{item.close_price}</div>\n                      </CTableDataCell>\n                      \n                      <CTableDataCell>\n                        <div>{item.open_time}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.close_time}</div>\n                      </CTableDataCell>\n                      {orderType === 'open' &&\n                        <CTableDataCell className=\"text-center\">\n                          <CButton color=\"dark\" onClick={(e) => {\n                            gotoOrderClose(item);\n                          }}>Close Order</CButton>\n                        </CTableDataCell>\n                      }\n                                          \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Portfolio\n","export function findBidAndAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    const askPrice = Math.min(...askPrices);\r\n    return [bidPrice, askPrice];\r\n}\r\n\r\n\r\nexport function findBidPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const bidPrices = buySellData.map(order => order.bp);\r\n\r\n    // Calculate bid and ask\r\n    const bidPrice = Math.max(...bidPrices);\r\n    return bidPrice\r\n}\r\n\r\nexport function findAskPrice(buySellData) {\r\n    // Extract bid and ask prices\r\n    const askPrices = buySellData.map(order => order.ap);\r\n\r\n    // Calculate bid and ask\r\n    const askPrice = Math.max(...askPrices);\r\n    return askPrice\r\n}\r\n\r\n\r\n\r\nexport const token = \"eyJ0eXAiOiJKV1QiLCJrZXlfaWQiOiJza192MS4wIiwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiI2MkFIQVAiLCJqdGkiOiI2NWQ4MmJjNjI3ZWFkOTMzYjUzODM5YWYiLCJpc011bHRpQ2xpZW50IjpmYWxzZSwiaXNBY3RpdmUiOnRydWUsInNjb3BlIjpbImludGVyYWN0aXZlIiwiaGlzdG9yaWNhbCJdLCJpYXQiOjE3MDg2NjU3OTgsImlzcyI6InVkYXBpLWdhdGV3YXktc2VydmljZSIsImV4cCI6MTcwODcyNTYwMH0.aOzgAAo2X30P-edOaP3rjOVpzQ8KXW0s_8e_HRSwoI0\"\r\n\r\n\r\n\r\n"],"names":["protobuf","require","protobufRoot","Portfolio","isConnected","setIsConnected","useState","fetchDataCalled","setFetchDataCalled","feedData","setFeedData","openSymbols","setOpenSymbols","data","setData","orderType","setOrderType","bidAskPrice","setBidAskPrice","navigate","useNavigate","useEffect","fetchData","length","async","load","proto","console","log","initProtobuf","connectWebSocket","token","urlTradingSymbol","wsUrl","headers","Authorization","response","fetch","method","ok","Error","json","authorizedRedirectUri","getUrl","ws","WebSocket","onopen","guid","mode","instrumentKeys","send","Buffer","from","JSON","stringify","onclose","onmessage","arrayBuffer","blob","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","blobToArrayBuffer","event","buffer","lookupType","decode","warn","decodeProfobuf","feeds","error","close","userDataString","localStorage","getItem","userData","parse","userToken","userId","user_id","concat","jsonData","axios","get","extractedSymbols","map","item","symbol","_jsxs","_Fragment","children","_jsx","CRow","CCol","sm","CFormSelect","value","onChange","e","target","xs","CCard","className","CCardHeader","CCardBody","CTable","align","hover","responsive","striped","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","index","CTableDataCell","trading_symbol","lot_size","quantity","expiry_date","open_price","findAskPrice","ff","marketFF","marketLevel","bidAskQuote","toFixed","close_price","open_time","close_time","CButton","onClick","jsonString","setItem","gotoOrderClose","findBidAndAskPrice","buySellData","bidPrices","order","bp","askPrices","ap","Math","max","min"],"sourceRoot":""}